# Simplified Dockerfile to avoid QEMU segmentation faults
# Multi-platform PowerShell image selection with explicit ARG declarations
ARG VARIANT="7.4-ubuntu-22.04"
ARG BUILDPLATFORM
ARG TARGETPLATFORM

# Use native arm64 platform to avoid emulation issues
FROM --platform=linux/arm64 mcr.microsoft.com/powershell:${VARIANT}

# Avoid warnings by switching to noninteractive
ENV DEBIAN_FRONTEND=noninteractive

# Install additional OS packages
RUN apt-get update && apt-get -y install --no-install-recommends \
    git \
    curl \
    ca-certificates \
    openssh-client \
    jq \
    make \
    build-essential \
    python3 \
    python3-pip \
    sudo \
    locales \
    && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# Generate locale
RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    locale-gen
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Create non-root user first to avoid permission issues
ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# Create workspace directory
RUN mkdir -p /workspace && chown $USERNAME:$USERNAME /workspace

# Create script to install PowerShell modules after container starts
# This avoids QEMU issues during build
RUN echo '#!/bin/bash\n\
if [ ! -f /home/vscode/.ps_modules_installed ]; then\n\
    echo "Installing PowerShell modules..."\n\
    pwsh -NoProfile -Command "\n\
        Set-PSRepository PSGallery -InstallationPolicy Trusted;\n\
        \$ProgressPreference = \"SilentlyContinue\";\n\
        try {\n\
            Write-Host \"Installing PSScriptAnalyzer...\";\n\
            Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force;\n\
            Write-Host \"Installing Pester...\";\n\
            Install-Module -Name Pester -RequiredVersion 5.5.0 -Scope CurrentUser -Force;\n\
            Write-Host \"Installing PlatyPS...\";\n\
            Install-Module -Name PlatyPS -Scope CurrentUser -Force;\n\
            Write-Host \"Installing InvokeBuild...\";\n\
            Install-Module -Name InvokeBuild -Scope CurrentUser -Force;\n\
            Write-Host \"All modules installed successfully\";\n\
            touch /home/vscode/.ps_modules_installed;\n\
        } catch {\n\
            Write-Warning \"Module installation failed: \$_\";\n\
        }\n\
    "\n\
fi' > /usr/local/bin/install-ps-modules.sh && \
    chmod +x /usr/local/bin/install-ps-modules.sh

# Set the default shell to pwsh for the user
RUN chsh -s /usr/bin/pwsh $USERNAME

USER $USERNAME
WORKDIR /workspace

# Set PowerShell as the default shell
SHELL ["pwsh", "-NoProfile", "-Command"]

ENV DEBIAN_FRONTEND=dialog